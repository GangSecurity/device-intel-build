#!/bin/bash

set -e

PACKAGE="$OUT/ota-dev.zip"
dutID=$(adb devices | grep -v 'List' | awk '{print ($1)}')
AndroidVer=$(adb shell getprop ro.build.version.release | awk '{print ($1)}')
HasFotaAPP=-1
UPDATE_CMD=update_from_mos
OFF=""

function usage {
    echo "Usage: ${0} [-h] [-p package_name.zip] [-r] [-s dutID] [-o]"
    echo "    Flash the update package to the device and apply it"
    echo "Options:"
    echo "    -h : print this help message"
    echo "    -p <package_name>: name of package to apply, default
    package is $OUT/ota-dev.zip"
    echo "    -r : use sideload method: reboot to recovery first and
    push the package via sideload, default behavior is to push the
    package when the device is in MOS, uncrypting it if needed, then
    rebooting to recovery (as the fota app will do)"
    echo "    -s <dutID>: id of the DUT in case more than one device
    is connected to the host"
    echo "    -o : turn off the device after applying the OTA instead
    of rebooting it"
    exit 1
}

function wait_for_adb {
    while [ -z "$(adb devices | grep $dutID | awk '{print($1)}')" ]; do
        sleep 1
    done
}

function adb_root {
    echo "Waiting for device : $dutID"
    wait_for_adb
    echo "Setting root permissions..."
    adb -s $dutID root
    sleep 1
    wait_for_adb
}

function check_has_fota {
    FotainSys=$(adb -s $dutID shell ls -l /system/vendor/app/AFotaApp | grep 'Fota' | awk  '{print($8)}')
    FotainData=$(adb -s $dutID shell ls -l /data/app | grep 'fota' | awk  '{print($8)}')

    if [ ! -z "$FotainSys" ]; then
        echo "There is $FotainSys in system"
        HasFotaAPP=1
    fi

    if [ ! -z "$FotainData" ]; then
        echo "There is $FotainData in data"
        HasFotaAPP=2
    fi
}

function wait_for_uncrypt {
    GET_PROGRESS="adb -s $dutID shell tail /cache/recovery/uncrypt_status"

    echo "Uncrypting $(basename $PACKAGE)..."
    # returns when the file /cache/recovery/uncrypt_status is created
    adb -s $dutID shell "while [ ! -f /cache/recovery/uncrypt_status ];do sleep 1; done"
    progress=0
    while [ $progress -ne 100 ]; do
	progress=$($GET_PROGRESS | tail -1 | sed 's/\r//g')
	echo -ne "\r$progress%"
	sleep 1
    done
    echo " done!"
}

function update_from_mos {
    echo "Device is runnig Android: $AndroidVer"
    adb_root
    echo "Copying OTA image $(basename $PACKAGE) to device..."
    adb -s $dutID push $PACKAGE /data/local/tmp/update.zip
    check_has_fota
    if [ $HasFotaAPP -gt 0 ]; then
        echo "Doing uncrypt and rebooting into recovery console with Fota app..."
        adb -s $dutID shell "am broadcast -a com.intel.afotaapp.INSTALL_LOCAL_OTA -e com.intel.afotaapp.extra.LOCAL_OTA_PATH /data/local/tmp/update.zip"
    else
        echo ""
        echo "Run failed, No fota app in your device!"
        echo "Please install it first! AFotaApp.apk can be found in system/vendor/app/AFotaApp."
    fi
}

function update_from_ros {
    adb_root
    echo "Rebooting device $dutID to sideload..."
    adb -s $dutID reboot sideload-auto-reboot
    sleep 1
    wait_for_adb
    adb -s $dutID sideload $PACKAGE
}

while getopts ":s:p:orh" opt; do
    case $opt in
        h)
            usage
            ;;
        p)
            PACKAGE=$OPTARG
            ;;
        r)
            UPDATE_CMD=update_from_ros
            ;;
        s)
            dutID=$OPTARG
            ;;
        o)
            OFF="--shutdown_after\n"
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
    esac
done

# Run the update command, default (update_from_mos) is using the same
# flow as the fota app will do
$UPDATE_CMD
