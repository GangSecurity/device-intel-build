#!/bin/bash
# Author : Xiang Deng <xiangx.deng@intel.com>

export OPENSSL_CONF=${OPENSSL_CONF:-/etc/ssl/openssl.cnf}

ANDROID_BUILD_TOP=`readlink -f ${ANDROID_BUILD_TOP:-""}`
AVB_TOOL="avbtool"
AVB_ALGORITHM_ARGS="--algorithm SHA256_RSA4096"
AVB_OEM_KEY="$ANDROID_BUILD_TOP/external/avb/test/data/testkey_rsa4096"

SIMG_DUMP="$ANDROID_BUILD_TOP/system/core/libsparse/simg_dump.py"
SCRIPT_ABS_NAME=`readlink -f $0`
UNSIGN_BOOT_TOOL=`dirname $SCRIPT_ABS_NAME`"/unsign_boot_img.py"

TMPDIR=${TMPDIR:-/tmp}
PREFIX="$TMPDIR/$USER"
IMG_DIR="$PREFIX/img"
TMP_DIR="$PREFIX/tmp"
IMG=""
KEYS_DIR="$PREFIX/keys"
USERKEY="$KEYS_DIR/userkey"
WD=`pwd`

function usage {
    echo "usage: `basename $0` [-b <boot_or_recovery_image_path> | -s <system_image_path> | -c | -h]"
    echo "       -c: clean everything"
    echo "       -b <image_path>: name of the boot/recovery image to split/sign"
    echo "       -s <image_path>: name of the system image to corrupt"
    echo "       -h: print this message"
    echo "example:"
    echo "        $0 -b ~/boot.img"
    exit 1
}

function create_dir {
    [ ! -d "$1" ] && mkdir -p "$1"
}

function generate_user_keys {
    if [ ! -e $USERKEY ]
    then
        cd $KEYS_DIR
        echo "Generating userkey and certificates."
        # generate userkey to sign bootimages
        openssl genrsa -out $USERKEY.pem 4096
        # extract DER pub key from the $USERKEY
        openssl rsa -in $USERKEY.pem -pubout -out $USERKEY.pub
        cd $WD
    else
        echo "Using existing user key and certificate, use -c if you want to force regenerating new ones."
    fi
}

function generate_corrupted_system_images {
    LIST_VBMETA_IMGS=("verity.img" "system_metadata.img")
    START_OFFSET=()
    TMP_VBMETA_IMG="$TMP_DIR/tmp.img"

    # for system.img
    read fec_size <<< "$($AVB_TOOL info_image --image $TMP_DIR/$IMG.img | grep 'FEC size:' | awk -F" " '{print $3}')"

    # for vbmeta.img
    read authen_blksize <<< "$($AVB_TOOL info_image --image $TMP_DIR/vbmeta.img | grep 'Authentication Block:' | awk -F" " '{print $3}')"
    read auxil_blksize <<< "$($AVB_TOOL info_image --image $TMP_DIR/vbmeta.img | grep 'Auxiliary Block:' | awk -F" " '{print $3}')"

    authen_offset=256
    hash_offset=$authen_offset
    sign_offset=`expr $authen_offset + 32`
    sign_size=512
    auxil_offset=`expr $authen_offset + $authen_blksize`
    descr_offset=$auxil_offset
    # echo "authen_offset : $authen_offset , hash_offset : $hash_offset , sign_offset : $sign_offset , auxil_offset : $auxil_offset , descr_offset : $descr_offset "

    if [ $fec_size -ne 0 ]
    then
       fec_supported=1
       read tree_offset tree_len <<< "$($SIMG_DUMP -v $TMP_DIR/$IMG.img | tail -6  | head -1 | awk '{print $2" "$3}')"
       read fec_offset fec_size <<< "$($SIMG_DUMP -v $TMP_DIR/$IMG.img | tail -5  | head -1 | awk '{print $2" "$3}')"
       # echo "fec_offset = $fec_offset, fec_size = $fec_size"
    else
       fec_supported=0
       read tree_offset tree_len <<< "$($SIMG_DUMP -v $TMP_DIR/$IMG.img | tail -5  | head -1 | awk '{print $2" "$3}')"
       fec_offset=0
    fi

    # echo "tree offset : $tree_offset , tree len : $tree_len "

    if [ $fec_supported -eq 1 ]
    then
        dd if=$TMP_DIR/$IMG.img of=$TMP_VBMETA_IMG bs=$tree_offset skip=1 2>/dev/null
        dd if=$TMP_VBMETA_IMG of=$TMP_DIR/${LIST_VBMETA_IMGS[0]} bs=$tree_len count=1 2>/dev/null
        START_OFFSET[0]=$tree_offset
    else
        i=0
        while read start length; do
            # use of tmp file but save us some unreliable arithmetic
            dd if=$TMP_DIR/$IMG.img of=$TMP_VBMETA_IMG bs=$start skip=1 2>/dev/null
            dd if=$TMP_VBMETA_IMG of=$TMP_DIR/${LIST_VBMETA_IMGS[$i]} bs=$length count=1 2>/dev/null
            START_OFFSET[$i]=$start
            # echo "fec_supported = 0 ,start = $start, length = $length"
        done <<< "$($SIMG_DUMP -v $TMP_DIR/$IMG.img | tail -5  | head -1 | awk '{print $2" "$3}')"
    fi

    # ready for vbmeta's corrupt...
    dd if=$TMP_DIR/vbmeta.img of=$TMP_VBMETA_IMG bs=$sign_offset skip=1 2>/dev/null
    dd if=$TMP_VBMETA_IMG of=$TMP_DIR/${LIST_VBMETA_IMGS[1]} bs=$sign_size count=1 2>/dev/null
    START_OFFSET[1]=$sign_offset

    for i in "${!LIST_VBMETA_IMGS[@]}"
    do
        # make a copy to keep originals
        cp $TMP_DIR/${LIST_VBMETA_IMGS[$i]} $TMP_DIR/corrupted_${LIST_VBMETA_IMGS[$i]}
        if [ "${LIST_VBMETA_IMGS[$i]}" = "system_metadata.img" ]
        then
            # for vbmeta.img
            # skip 256 + 32 first bytes to corrupt signature data
            # and introduce some random bytes
            bs=1
            count=20
            seek=$sign_offset
        else
            # by default corrupt the first block
            bs=4096
            count=1
            seek=0
        fi

        echo "Corrupting ${LIST_VBMETA_IMGS[$i]}..."
        dd if=/dev/urandom bs=$bs count=$count conv=notrunc seek=$seek of=$TMP_DIR/corrupted_${LIST_VBMETA_IMGS[$i]}

        if [ "${LIST_VBMETA_IMGS[$i]}" = "system_metadata.img" ]
        then
           # create vbmeta_corrupted_system_verity.img for vbmeta.img
           echo "Creating vbmeta_corrupted_${LIST_VBMETA_IMGS[$i]}..."
           cp $TMP_DIR/vbmeta.img $IMG_DIR/vbmeta_corrupted_${LIST_VBMETA_IMGS[$i]}
           # echo "for vbmeta.img -----> START_OFFSET[$i] = ${START_OFFSET[$i]}"
           dd if=$TMP_DIR/corrupted_${LIST_VBMETA_IMGS[$i]} bs=${START_OFFSET[$i]} conv=notrunc seek=1 of=$IMG_DIR/vbmeta_corrupted_${LIST_VBMETA_IMGS[$i]}
        else
           # create system_corrupted_verity.img for system.img
           echo "Creating system_corrupted_${LIST_VBMETA_IMGS[$i]}..."
           cp $TMP_DIR/$IMG.img $IMG_DIR/system_corrupted_${LIST_VBMETA_IMGS[$i]}
           # echo "for system.img -----> START_OFFSET[$i] = ${START_OFFSET[$i]}"
           dd if=$TMP_DIR/corrupted_${LIST_VBMETA_IMGS[$i]} bs=${START_OFFSET[$i]} conv=notrunc seek=1 of=$IMG_DIR/system_corrupted_${LIST_VBMETA_IMGS[$i]}
        fi
    done

    # corrupt bootanimation binary
    echo "Corrupting bootanimation binary..."
    strings $TMP_DIR/$IMG.img | grep -m 1 "SurfaceFlinger died" &>/dev/null
    if [ $? -ne 0 ]
    then
        echo "'SurfaceFlinger died' cannot be found in $TMP_DIR/$IMG.img, please find an other string to modify..."
        exit 1
    fi
    cp $TMP_DIR/$IMG.img $IMG_DIR/system_corrupted_block.img
    sed -i 's/SurfaceFlinger died/FlingerSurface died/' $IMG_DIR/system_corrupted_block.img
}

function generate_corrupted_boot_images {
    TMP_BOOT_IMG="$TMP_DIR/tmp.img"

    echo "Calculate boot partition size."
    read boot_parsize <<< "$($AVB_TOOL info_image --image $TMP_DIR/$IMG.img | grep 'Image size:' | awk -F" " '{print $3}')"
    echo "Unsigning $IMG image."

    $UNSIGN_BOOT_TOOL $TMP_DIR/$IMG.img > $TMP_DIR/raw_$IMG.img
    cp $TMP_DIR/raw_$IMG.img $TMP_DIR/unsigned_$IMG.img

    $AVB_TOOL add_hash_footer --image $TMP_DIR/unsigned_$IMG.img --partition_size $boot_parsize --partition_name boot

    echo "Generating $IMG image signed with oem key."
    cp $TMP_DIR/raw_$IMG.img $TMP_DIR/oem_signed_$IMG.img
    $AVB_TOOL add_hash_footer --image $TMP_DIR/oem_signed_$IMG.img --partition_size $boot_parsize --partition_name boot $AVB_ALGORITHM_ARGS --key $AVB_OEM_KEY.pem
    echo "Corrupting a copy of $IMG image signed with oem key."
    cp $TMP_DIR/oem_signed_$IMG.img $TMP_DIR/oem_signed_corrupted_$IMG.img
    sed -i 's/loglevel=./loglevel=7/' $TMP_DIR/oem_signed_corrupted_$IMG.img
    echo "Corrupting the signature of a copy of $IMG image signed with oem key."
    cp $TMP_DIR/oem_signed_$IMG.img $TMP_DIR/oem_signed_corrupted_signature_$IMG.img
    # replaces 8 bytes in the signature
    du -b $TMP_DIR/raw_$IMG.img | while read size image; do dd if=/dev/urandom bs=1 count=8 conv=notrunc seek=4096 of=$TMP_DIR/oem_signed_corrupted_signature_$IMG.img; done

    if [ -e $USERKEY.pem ]
    then
        echo "Generating $IMG image signed with userkey key."
        cp $TMP_DIR/raw_$IMG.img $TMP_DIR/user_signed_$IMG.img
        $AVB_TOOL add_hash_footer --image $TMP_DIR/user_signed_$IMG.img --partition_size $boot_parsize --partition_name boot $AVB_ALGORITHM_ARGS --key $USERKEY.pem
        echo "Corrupting a copy of $IMG image signed with userkey."
        cp $TMP_DIR/user_signed_$IMG.img $TMP_DIR/user_signed_corrupted_$IMG.img
        sed -i 's/loglevel=./loglevel=9/' $TMP_DIR/user_signed_corrupted_$IMG.img
        # echo "Generating $IMG image signed with signed user certificate."
        # cp $TMP_DIR/raw_$IMG.img $TMP_DIR/user_verified_signed_$IMG.img
        # $AVB_TOOL add_hash_footer --image $TMP_DIR/user_verified_signed_$IMG.img --partition_size $boot_parsize --partition_name boot $AVB_ALGORITHM_ARGS --key $USERKEY.pem
    fi

    echo "Moving images into $IMG_DIR/"
    mv $TMP_DIR/oem_signed_$IMG.img $IMG_DIR
    mv $TMP_DIR/oem_signed_corrupted_$IMG.img $IMG_DIR
    mv $TMP_DIR/oem_signed_corrupted_signature_$IMG.img $IMG_DIR
    mv $TMP_DIR/unsigned_$IMG.img $IMG_DIR
    if [ -e $USERKEY.pem ]
    then
        mv $TMP_DIR/user_signed_$IMG.img $IMG_DIR
        mv $TMP_DIR/user_signed_corrupted_$IMG.img $IMG_DIR
    fi
}

while getopts "b:chs:" opt; do
    case $opt in
        h)
            usage
            ;;
        b)
            IMG=`strings $OPTARG | grep -e 'boot$'`
            IMG="boot"
            if [ "X$IMG" = "X" ]
            then
                IMG=`strings $OPTARG | grep -e 'recovery$'`
            fi
            if [ "X$IMG" = "X" ]
            then
                echo "error! $OPTARG is neither detected as /boot or as /recovery image"
                exit 1
            fi
            IMG=`echo $IMG | sed 's_/__'`
            create_dir $TMP_DIR
            cp $OPTARG $TMP_DIR/$IMG.img
            ;;
        s)
            IMG="system"
            size=$(du -BM $OPTARG | awk '{print $1}')
            echo "Warning, this operation will consume 4 * $size on your disk"
            echo "Would you like to continue? [y/N]"
            read v
            case "$v" in
                "y" | "Y" | "yes")
                    ;;
                *)
                    echo "Aborted!"
                    exit 1
                    ;;
            esac
            echo "Copying $OPTARG..."
            create_dir $TMP_DIR
            cp $OPTARG $TMP_DIR/$IMG.img
            VBMETA_NAME=`echo $OPTARG | sed 's/system/vbmeta/'`
            echo "Copying $VBMETA_NAME..."
            cp $VBMETA_NAME $TMP_DIR/
            ;;
        c)
            echo "Cleaning $TMP_DIR, $IMG_DIR, $KEYS_DIR..."
            rm -rf $TMP_DIR
            rm -rf $IMG_DIR
            rm -rf $KEYS_DIR
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            usage
            ;;
    esac
done

# Make sure all varables are defined
if [ "X$ANDROID_BUILD_TOP" = "X" ]
then
    echo "Please source build/envsetup.sh and lunch with the appropriate target prior to use this script."
    usage
fi

if [ ! -e $TMP_DIR/$IMG.img ]
then
    echo "Image $TMP_DIR/$IMG.img not found, did you forgot -b or -s option?"
    usage
fi

# Main
create_dir $IMG_DIR

if [ "$IMG" = "system" ]
then
    generate_corrupted_system_images
else
    create_dir $KEYS_DIR
    generate_user_keys
    generate_corrupted_boot_images
fi

echo "Computing md5sum of images."
md5sum $IMG_DIR/*.img > $IMG_DIR/checksum.md5
echo "Your images are available in $IMG_DIR/"
