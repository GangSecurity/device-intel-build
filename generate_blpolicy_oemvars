#!/usr/bin/env python
#
# Copyright (C) 2015 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Produces a text file suitable for flashing with "fastboot flash oemvars"
which sets the device's time-based authenticated OAK and BPM variables.

Key pair supplied in the command line is expected to be in .pk8 and .x509.pem
format.

generate_blpolicy_oemvars [options] <output filename>

  -K  (--odm-pair)  <key pair>

  -O  (--oak-cert)  <cert>

  -B  (--bpm-value) <bpm-value>

  -D  (--disable)   <file>
      produce an additional OEMVARS file to delete the OAK and BPM variables

  -T  (--timestamp) <UNIX timestamp>
      Timestamp (seconds since the Epoch) to use for authenticated UEFI Variables.

"""
import sys
import tempfile
import os
import time
import struct
import hashlib

# Android Release Tools
sys.path.append("build/tools/releasetools")
import common

sys.path.append("device/intel/build/releasetools")
import intel_common

OPTIONS = common.OPTIONS
OPTIONS.odm_pair = None
OPTIONS.oak_cert = None
OPTIONS.bpm_value = None
OPTIONS.disable = False
OPTIONS.all_keys = set()
OPTIONS.guid = "1ac80a82-4f0c-456b-9a99-debeb431fcc1" # Fastboot GUID
OPTIONS.ts = 0

def main(argv):
    def option_handler(o, a):
        if o in ("-K", "--odm-pair"):
            OPTIONS.odm_pair = a
            OPTIONS.all_keys.add(a)
        elif o in ("-O", "--oak-cert"):
            OPTIONS.oak_cert = a
        elif o in ("-B", "--bpm-value"):
            OPTIONS.bpm_value = a
        elif o in ("-D", "--disable"):
            OPTIONS.disable = a
        elif o in ("-T", "--timestamp"):
            OPTIONS.ts = int(a)
        else:
            return False
        return True

    args = common.ParseOptions(argv, __doc__,
                               extra_opts = "K:O:B:D:G:T:",
                               extra_long_opts = ["odm-pair=", "oak-cert=",
                                                  "bpm-value=", "disable=", "timestamp="],
                               extra_option_handler = option_handler)

    if len(args) != 1:
        common.Usage(__doc__)
        sys.exit(1)

    if not OPTIONS.odm_pair:
        raise common.ExternalError("use of -K is mandatory")

    if not OPTIONS.bpm_value and not OPTIONS.oak_cert:
            raise common.ExternalError("use of -O is mandatory")

    if not OPTIONS.ts:
        OPTIONS.ts = int(time.time())

    passwords = common.GetKeyPasswords(OPTIONS.all_keys)

    certf = intel_common.pem_cert_to_der_cert(OPTIONS.oak_cert)
    m = hashlib.sha256()
    m.update(certf.read())
    certf.close()

    oak = intel_common.get_auth_data(OPTIONS.ts, OPTIONS.odm_pair,
                                     passwords[OPTIONS.odm_pair],
                                     None, OPTIONS.guid, "OAK", m.digest())

    bpm = intel_common.get_auth_data(OPTIONS.ts, OPTIONS.odm_pair,
                                     passwords[OPTIONS.odm_pair],
                                     None, OPTIONS.guid, "BPM",
                                     struct.pack("<Q", int(OPTIONS.bpm_value, 0)))

    output = open(args[0], "wb")
    output.write("# This file generated by generate_blpolicy_oemvars to set the Bootloader Policy\n");
    output.write("GUID = %s\n\n" % OPTIONS.guid)
    output.write("[ad] OAK %s\n\n" % intel_common.escaped_value(oak))
    output.write("[ad] BPM %s\n\n" % intel_common.escaped_value(bpm))
    output.close()

    if OPTIONS.disable:
        # Add 1 to the timestamp so they can always be disabled; auth variables only apply
        # for monotonically increasing values
        disable_oak = intel_common.get_auth_data(OPTIONS.ts + 1, OPTIONS.odm_pair,
                                                 passwords[OPTIONS.odm_pair],
                                                 None,  OPTIONS.guid, "OAK", None)
        disable_bpm = intel_common.get_auth_data(OPTIONS.ts + 1, OPTIONS.odm_pair,
                                                 passwords[OPTIONS.odm_pair],
                                                 None,  OPTIONS.guid, "BPM", None)
        output = open(OPTIONS.disable, "wb")
        output.write("# This file generated by generate_blpolicy_oemvars to disable the Bootloader Policy.\n");
        output.write("# This file clear the secured variable.  Use with caution.\n");
        output.write("GUID = %s\n\n" % OPTIONS.guid)
        output.write("[ad] OAK %s\n\n" % intel_common.escaped_value(disable_oak))
        output.write("[ad] BPM %s\n\n" % intel_common.escaped_value(disable_bpm))
        output.close()

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except common.ExternalError, e:
        print
        print "   ERROR: %s" % (e,)
        print
        sys.exit(1)

