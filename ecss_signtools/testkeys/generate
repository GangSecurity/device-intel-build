#! /bin/sh

# Generates the key and certificate materials needed to sign an Android build
# for a key set in the IT Enterprise Code Signing System (ECSS). It can be
# used to generate new materials if the tool requirements change.
#
# This script can be used to generate key material for other ECSS key sets.
# 1. Copy this script to the key set directory where new materials should be
#    created
# 2. Change the key names in the calls to make_stuff() to match your keys
# 3. Update the AUTH_FILE definition, if necessary
# 4. Run the script from inside the key set directory

MAKEPK8_JAR="${ANDROID_BUILD_TOP}/out/host/linux-x86/ecss/framework/makepk8_ecss.jar"
MAKEPK8="java -jar ${MAKEPK8_JAR}"
SIGNFILE=~/ecss/SignFile
CONVERTCERT="${ANDROID_BUILD_TOP}/out/host/linux-x86/ecss/bin/cert_to_verity_public"
AUTH_FILE=~/ecss/dpd-signing-ssl-combined.pem
OUTPUT_DIR=`dirname "$0"`
SERVER_URL="https://codesign-svc.intel.com/CertificateService31/Main.asmx"

# Creates a PKCS #8 wrapper around the ECSS parameters that indicate server
# and key name. The results are compatible with the ECSS JCE provider in
# ../provider.
#
# Performs a test signature with each key to obtain the corresponding cert
# to the ECSS public key. This is the only method for obtaining the cert
# provided by the ECSS.
make_stuff () {
	local basefilename=$1
	local keyname=$2
	local makepem=$3

	${MAKEPK8} ${makepem} ${OUTPUT_DIR}/${basefilename} "RSA" "-c ${keyname} -ws ${SERVER_URL}"

	local tmp_input=`mktemp --suffix=.cert_extraction`
	local tmp_output=`mktemp --suffix=.pk7 --dry-run`
	echo "Dummy file to extract certificate" > ${tmp_input}
	set -x
	${SIGNFILE} -ac ${AUTH_FILE} -ts -ws ${SERVER_URL} -c ${keyname} -s cl -cf ${tmp_output} ${tmp_input}
	openssl pkcs7 -print_certs -inform der -in ${tmp_output} > ${OUTPUT_DIR}/${basefilename}.x509.pem
	set +x

	rm ${tmp_input}
	rm ${tmp_output}
}

if [ ! -n "${ANDROID_BUILD_TOP}" ]; then
	echo "I'm hungry. Please lunch!"
	exit 1
fi
if [ ! -e ${SIGNFILE} ]; then
	echo "Please make sure SIGNFILE is set correctly. It doesn't seem to exist"
	exit 1
fi
if [ ! -e ${AUTH_FILE} ]; then
	echo "Please make sure AUTH_FILE is set correctly. It doesn't seem to exist"
	exit 1
fi
if [ ! -e ${MAKEPK8_JAR} ]; then
	echo "Must make ${MAKEPK8_JAR}"
	exit 1
fi
if [ ! -e ${CONVERTCERT} ]; then
	echo "Must make ${CONVERTCERT}"
	exit 1
fi

# Create the PKCS #8 blobs and extract certs for signing keys
# make_stuff <key-file-base> <ecss-key-name> [-pem]
make_stuff releasekey OTC_Android_OS_TEST_Release
make_stuff platform OTC_Android_OS_TEST_Platform
make_stuff shared OTC_Android_OS_TEST_Shared
make_stuff media OTC_Android_OS_TEST_Media
make_stuff verity_private_release_key OTC_Android_OS_TEST_Verity -pem
make_stuff DB OTC_Android_OS_TEST_UEFI_Boot_Signer
make_stuff oem OTC_Android_OS_TEST_OEM -pem
make_stuff KEK OTC_Android_OS_TEST_UEFI_KEK

# Rename files and convert formats for dm-verity tool compatibility
mv ${OUTPUT_DIR}/verity_private_release_key.pem ${OUTPUT_DIR}/verity_private_release_key
${CONVERTCERT} ${OUTPUT_DIR}/verity_private_release_key.x509.pem ${OUTPUT_DIR}/verity_key


