#!/usr/bin/env python
#
# Copyright (C) 2014 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Re-sign EFI bootloader binaries found in RADIO/bootloader.zip with production
keys. Can also substitute the vendor key inside the uefi_shim, or substitute
a new shim entirely.

Usage: sign_target_files_efiss <options> <input_target_files_zip> <output_file>

  -k  (--key-mapping) <loader.efi=keypair>
      For the loader binary specified, if found inside the TFP will be re-signed
      with the pair key provided. Call this multiple times to set the mapping for
      different loader binaries. Do not provide filename extensions; by default
      assumes private key ends in .pk8 and public key with .x509.pem

      Example: -k gummiboot.efi=path/to/keys/vendor
         Will use vendor.pk8 and vendor.x509.pem in the provided PATH to re-sign
         gummiboot.efi.

      This is a bit different from the --key_mapping option for
      sign_target_files_apks, as typically there are only 2 loaders to sign.

  -R  (--replace) <path inside archive>=<path>
      Replace existing EFI binary with one supplied on the command line. Intended
      for situations where we want to use a first stage loader signed by Microsoft.

  -V  (--vendor-cert-replace) <path to old cert>=<path to new cert>
      Replace the public vendor cert inside the shim with a certificate provided
      on the command line. Specify the path to the shim with --first-stage. Expects
      the keys to be in PEM format (like the Android x509.pem keys).

  -F  (--first-stage) <path inside archive>
      Indicate the name of the first-stage loader. Put a copy of it in
      EFI/BOOT/bootx64.efi or EFI/BOOT/bootia32.efi (depending on the type of
      PE/COFF executable it is.
"""

import sys
import shutil
import zipfile
import os
import shlex
import tempfile
import subprocess

if sys.hexversion < 0x02040000:
    print >> sys.stderr, "Python 2.4 or newer is required."
    sys.exit(1)

# Android Release Tools
sys.path.append("build/tools/releasetools")
import common

sys.path.append("device/intel/build/releasetools")
import intel_common

OPTIONS = common.OPTIONS
OPTIONS.key_map = {}
OPTIONS.vendor_key = None
OPTIONS.first_stage = None
OPTIONS.replace = {}
OPTIONS.all_keys = set()


def to_der(pem_cert_path):
    tf = tempfile.NamedTemporaryFile(prefix="to_der")

    cmd = ["openssl", "x509", "-inform", "PEM", "-outform", "DER",
        "-in", pem_cert_path, "-out", tf.name]
    if OPTIONS.verbose:
        print "  running: ", " ".join(cmd)
    p = common.Run(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    p.communicate()
    assert p.returncode == 0, "openssl cert conversion failed"
    tf.seek(os.SEEK_SET, 0)
    data = tf.read()
    tf.close()
    return data

def to_pem(der_key_path, password=None):
    # Defaults to 0600 permissions which is defintitely what we want!
    tf = tempfile.NamedTemporaryFile(prefix="to_pem")

    cmd = ["openssl", "pkcs8"];
    if password:
        cmd.extend(["-passin", "stdin"])
    else:
        cmd.append("-nocrypt")

    cmd.extend(["-inform", "DER", "-outform", "PEM",
        "-in", der_key_path, "-out", tf.name])
    p = common.Run(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    if password is not None:
        password += "\n"
    p.communicate(password)
    assert p.returncode == 0, "openssl key conversion failed"
    tf.seek(os.SEEK_SET, 0)
    return tf


def is_32bit_efi(data):
    tf = tempfile.NamedTemporaryFile()
    tf.write(data)
    cmd = ["file", tf.name]
    out = subprocess.check_output(cmd)
    tf.close()
    return "80386" in out


def sign_efi(src_path, dest_path, priv_path, cert_path):
    cmd = ["sbsign", "--key", priv_path, "--cert", cert_path, 
            "--output", dest_path, src_path,]
    p = common.Run(cmd)
    p.communicate()
    assert p.returncode == 0, "sbsign failed"


def get_named_temp(prefix=None):
    f = tempfile.NamedTemporaryFile(prefix=prefix, delete=False)
    OPTIONS.tempfiles.append(f.name)
    f.close()
    return f.name

def extract_to_temp(input_zip, path, prefix=None):
    f = tempfile.NamedTemporaryFile(prefix=prefix, delete=False)
    OPTIONS.tempfiles.append(f.name)
    f.write(input_zip.read(path))
    f.close()
    return f.name

def replace_vendor(data, old_cert_path, new_cert_path):
    old_cert_data = to_der(old_cert_path)
    new_cert_data = to_der(new_cert_path)

    # Replace data
    if old_cert_data not in data:
        raise common.ExternalError("Old cert not found in binary. Cannot replace.");

    # cannot overwrite other data
    if (len(new_cert_data) > len(old_cert_data)):
        raise common.ExternalError("length of new cert data is larger than the old cert")

    # need to make sure the replacement is of same size
    # or else the binary will be smaller!!
    while (len(new_cert_data) < len(old_cert_data)):
        new_cert_data = new_cert_data + b'\x00'

    return data.replace(old_cert_data, new_cert_data)


def process_bootzip(input_bootzip, output_bootzip, passwords):
    for zi in input_bootzip.infolist():
        path = zi.filename
        data = input_bootzip.read(zi)

        if OPTIONS.verbose:
            print "Processing",path

        # Don't bother, copying these over
        if path.startswith("EFI/BOOT/boot") and OPTIONS.first_stage:
            continue

        # Shim will now have the new vendor key in it
        if OPTIONS.vendor_key and path == OPTIONS.first_stage:
            print "Replacing key inside", path
            data = replace_vendor(data, OPTIONS.old_vendor_key, OPTIONS.vendor_key)

        if path in OPTIONS.key_map:
            print "Re-signing", path
            cert_path = OPTIONS.key_map[path] + OPTIONS.public_key_suffix

            password = None
            if OPTIONS.key_map[path] in passwords:
                password = passwords[OPTIONS.key_map[path]]
            priv = to_pem(OPTIONS.key_map[path] + OPTIONS.private_key_suffix,
                    password)

            in_efi = tempfile.NamedTemporaryFile(prefix="in_efi")
            in_efi.write(data)
            in_efi.flush()

            out_efi = tempfile.NamedTemporaryFile(prefix="out_efi")

            sign_efi(in_efi.name, out_efi.name, priv.name, cert_path)

            in_efi.close()
            priv.close()
            out_efi.seek(os.SEEK_SET, 0)
            data = out_efi.read()
            out_efi.close()

        if path in OPTIONS.replace:
            f = open(OPTIONS.replace[path])
            data = f.read()
            f.close()

        output_bootzip.writestr(zi, data)
        if path == OPTIONS.first_stage:
            if is_32bit_efi(data):
                output_bootzip.writestr("EFI/BOOT/bootia32.efi", data)
            else:
                output_bootzip.writestr("EFI/BOOT/bootx64.efi", data)


def get_input_bootzip(input_zip, path):
    outfn = extract_to_temp(input_zip, path, "input_bootzip")
    input_bootzip = zipfile.ZipFile(outfn, "r")
    return input_bootzip


def get_output_bootzip():
    of_file = get_named_temp("output_bootzip")
    output_bootzip = zipfile.ZipFile(of_file, "w")
    return output_bootzip, of_file


def main(argv):

    def option_handler(o, a):
        if o in ("-k", "--key-mapping"):
            k,v = a.split("=")
            OPTIONS.key_map[k] = v
            OPTIONS.all_keys.add(v)
        elif o in ("-R", "--replace"):
            k,v = a.split("=")
            OPTIONS.replace[k] = v
        elif o in ("-V", "--vendor-cert-replace"):
            OPTIONS.old_vendor_key,OPTIONS.vendor_key = a.split("=")
        elif o in ("-F", "--first-stage"):
            OPTIONS.first_stage = a
        else:
            return False
        return True

    args = common.ParseOptions(argv, __doc__,
            extra_opts = "k:R:V:F:",
            extra_long_opts = ["key-mapping=",
                "replace=", "vendor-cert-replace=", "first-stage="],
            extra_option_handler = option_handler)

    # Do some sanity checks on provided options
    if set(OPTIONS.key_map.keys()) & set(OPTIONS.replace.keys()):
        raise common.ExternalError("The same loaders can't be in --replace and --key_mapping\n")

    if OPTIONS.vendor_key and not OPTIONS.first_stage:
        raise common.ExternalError("Vendor key supplied, but --first-stage not provided\n")

    if OPTIONS.vendor_key and OPTIONS.first_stage not in OPTIONS.key_map:
        raise common.ExternalError("Vendor key supplied, but no key mapping for first stage supplied\n")

    if len(args) != 2:
        common.Usage(__doc__)
        sys.exit(1)


    print "Extracting bootloader.zip"
    input_zip = zipfile.ZipFile(args[0], "r")

    input_bootzip = get_input_bootzip(input_zip,
            os.path.join("RADIO", "bootloader.zip"))
    usb_input_bootzip = get_input_bootzip(input_zip,
            os.path.join("RADIO", "loader_usb.zip"))

    print "Processing private keys"
    OPTIONS.info_dict = common.LoadInfoDict(input_zip)
    passwords = common.GetKeyPasswords(OPTIONS.all_keys)

    output_bootzip, output_bz_file = get_output_bootzip()
    usb_output_bootzip, usb_output_bz_file = get_output_bootzip()

    process_bootzip(input_bootzip, output_bootzip, passwords)
    output_bootzip.close()

    process_bootzip(usb_input_bootzip, usb_output_bootzip, passwords)
    usb_output_bootzip.close()

    print "Building destination target-files-package"
    output_zip = zipfile.ZipFile(args[1], "w")
    for zi in input_zip.infolist():
        if zi.filename == "RADIO/bootloader.zip":
            output_zip.write(output_bz_file, zi.filename)
        elif zi.filename == "RADIO/loader_usb.zip":
            output_zip.write(usb_output_bz_file, zi.filename)
        else:
            output_zip.writestr(zi, input_zip.read(zi))

    output_zip.close()
    print "All done."

if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except common.ExternalError, e:
        print
        print "   ERROR: %s" % (e,)
        print
        sys.exit(1)

